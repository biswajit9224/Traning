Below are the interview questions that were asked in different companies. I will be updating the page as and when I collect the questions.

1. Tell me about yourself.
NOTE: Please Note the below are the sample answers. You can alter it to suite your profile.

I am Ram.
I Graduated in the year-2015 in Electronics and Communication engineering.
After Graduation I got an opportunity to work with IBM.
In IBM, I started working as a Manual/Automation test engineer. And I was working on online shopping application.
I worked in IBM for about 2 years and then I got an opportunity to work HP.
From past 1 year I am working in HP as Senior Automation test engineer.
2. Explain about your project.
NOTE: Please keep that the explanation about project brief and crisp. Do not go in-depth and try to explain different features of the application.

I am working for American Airlines account/client.And i am working on online shopping cart application.
This application allows the AA employees to shop electronic gadgets online in discounted price.
I am completely into automating this online shopping portal.
3. Explain the framework or what kind of framework you are using.
We are using DataDriven framework with POM approach or design pattern with pytest unittest framework.
Explain the framework structure. (Like Data, Library, POM, Tests, Reports, Screenshot)
All common functionalities of the application would be maintained in a separate POM class called "BasePage".
All other POM classes will inherit "BasePage".
Similarly the common functionalities for all the test scripts would be maintained in a separate class called "BaseTest". 
(Like Launching browser, navigating to URL, login, logout and closing the browser)
All the test scripts will inherit from "BaseTest". So we do not have to write the code for common functionalities as mentioned in 
the above step in each and every test script. This avoids duplication of code.
Explain how you are maintaining the test data and locators. Like, for each page we create a separate work sheet and maintain all
 the locators in that worksheet and we maintain separate test data sheet where we divide
 the test data based on modules. We maintain separate worksheet in excel for each module. The test data required for all the test cases
 for each module will be maintained in the corresponding worksheet.(Do not start explaining the logic of how data and locators are being read from excel sheet).
All generic functions for clicking on element, entering text, selecting item from the list box would be maintained in a separate class called "SeleniumWrapper".
We have written a wait decorator for Synchronisation. Each generic function is being decorated with wait decorator. So, before performing 
any action on a web element, the decorator checks if the element is visible and enabled.
To run the test suite, we have written a driver script. We have written a logic to read the excel and get all the test scripts which has "Execute"
 column "Yes" and execute the test suite.
We can run all the failed test's using command pytest --last-failed --last-failed-no-failures none
HTML reports will be generated in "Reports" folder and all the screenshots will be taken in "Screenshots" folder.
What are your current roles and responsibility in the project.
Automation script development and execution, reporting etc.
Interacting with developers and manual testers in understanding the functionality better, reproducing the defects found during automation, etc. 
(Please add if you need to add any other responsibility)
What are the challenges that you have faced in your project while automating.
The main challenge is automating in Agile environment. Where the objects and the application scenario flows are constantly changing.
Add any other challenges that you have faced in your project.
Selenium (Please refer to class Notes and demo's as well for more programming questions)
Explain the architecture of Selenium.
Why do we need drivers (chromedriver, gecko driver, safaridriver). Who maintains the drivers?
What is the difference between close() and quit() method.
What kind of bugs that you have found out in your application while running automation?
How many time you run regression execution in a month?
What is the difference between python script and a module?
What is the difference between Lists and Tuples?
Is Python 100% OOP language?
What is raw string?
How to get the alt tag of a webelement.
1. Write a program to find the length of the string without using inbuilt function (len).

def _len(iterable):
    _count = 0
    for item in iterable:
        _count += 1
    return _count

>>> _len('Hello')
5
>>> _len([1, 2, 3, 4])
4
>>> 
>>> _len({1, 2, 3})
3
>>> _len((1, 2, 3, 4))
4
>>> 
2. Write a program to reverse a string without using any inbuilt functions.

def reverse(any_string):
    temp = []
    for i in range(len(any_string)-1, -1, -1):
        temp.append(any_string[i])
    return ''.join(temp)

>>> reverse('Hello world')
'dlrow olleH'
>>> 
>>> reverse('Python')
'nohtyP'
>>> 
>>> reverse('racecar')
'racecar'
>>> 
3. Write a program to replace one string with another. e.g. "Hello World" replace "World" with "Universe".

>>> s = 'Hello world'
>>> s.replace('world', 'universe')
'Hello universe'
>>>
4. How to convert a string to a list and vice-versa.

def convert_to_string(any_list):
    return ''.join(any_list)

def convert_to_list(any_string):
    return any_string.split()

>>> convert_to_list('steve')
['steve']
>>> convert_to_string(['steve', 'jobs'])
'stevejobs'
5. Covert the string "Hello welcome to Python" to a comma separated string.

>>> s = "Hello welcome to Python"
>>> 
>>> s
'Hello welcome to Python'
>>> 
>>> temp = s.split()
>>> temp
['Hello', 'welcome', 'to', 'Python']
>>> ','.join(temp)
'Hello,welcome,to,Python'
6. Write a program to print alternate characters in a string.

>>> s = 'hello world'
>>> print(s[::2])  # Using Slicing Syntax
hlowrd
>>> 
7. Write a Program to print ascii values of the characters present in a string.

>>> s = 'hello'
>>> 
>>> for c in s:
	print(ord(c))
104
101
108
108
111
>>> 
8. Write program to convert upper case to lower case and vice-versa without using inbuilt method.

def convert(any_string):
    l = []
    for c in any_string:
        temp = ord(c)   # Get the ASCII value of the character
        if temp>= 97 and temp<=122:
            l.append(chr(temp - 32))
        elif temp>=65 and temp<=90:
            l.append(chr(temp+32))
    return ''.join(l)

>>> convert('Hello WorlD')
'hELLOwORLd'
9. Write program to swap two numbers without using 3rd variable.

>>> a = 10
>>> b = 20
>>> 
>>> b, a = a, b
>>> a
20
>>> b
10
>>> 
10. Write program to merge two different lists.

>>> a = [1, 2, 3]
>>> 
>>> b = [4, 5, 6]
>>> 
>>> c = [*a, *b]
>>> c
[1, 2, 3, 4, 5, 6]
>>> 
11. Write program to read a random line in a file. (ex. 50, 65, 78th line)

class ReadRandomLine:
	def __init__(self, objfile):
		self._objfile = objfile
	
        def __getitem__(self, index):
		lines = self._objfile.readlines()
                try:
		  return lines[index]
                except IndexError:
                  print('Please check the line number')
11. Write a program to check if the given string is Palindrome or not without using reversed method.

>>> def is_palindrome(iterable):
	rev_iter = iterable[::-1]
	if iterable == rev_iter:
		return True
	else:
		return False

	
>>> is_palindrome('racecar')
True
>>> is_palindrome('malayalam')
True
>>> is_palindrome('hello')
False
>>> 
12 Write a program to search for a character in a given string and return the corresponding index.

>>> def search_character(string, key):
	for index, c, in enumerate(string):
		if c == key:
			print(f'Character {c} is at index {index}')

>>> search_character('hello world', 'w')
Character w is at index 6
>>> 
>>> search_character('hello world', 'd')
Character d is at index 10
>>> 
>>> 
13 Write a program to get the below output

sentence = "python is a programming language"
# d = {'p':['python', 'programming'] , 'i': ['is'] , 'a': ['a'] , 'l' : ['language'] }
from collections import defaultdict
d = defaultdict(list)
words = sentence.split()
for word in words:
   d[word[0]].append(word)
14 Write a to replace all the characters with - if the character occurs more than once in a string

my_string = 'hellohai' # O/P should be '-e--o-ai'

my_string = 'hellohai'

# Get all the unique characters
ss = set(my_string)

for ch in ss:
    if my_string.count(ch) > 1:
        my_string = my_string.replace(ch, '-')

print(my_string)
15 write a decorator that returns only positive values of subtraction

def positive(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        return abs(result)
    return wrapper

@positive
def sub(a, b):
    return a - b

>>> sub(1, 2)
1
>>> sub(-1, 100)
101
>>> sub(-100, 1)
101
>>> sub(3, 1)
2
>>> sub(-1, -2)
1
>>> sub(-2, 1)
3
>>> 
16 How to get the count of number of instances of a class that is being created.

class Login:
   login_count = 0    # Class Variable that keeps count of login counts
   def __init__(self):
       Login.login_count += 1
  

>>> u1 = Login()
>>> Login.login_count
1
>>> u2 = Login()
>>> Login.login_count
2
>>> u3 = Login()
>>> Login.login_count
3
>>> 
17 Write a function which takes a list of strings and integers.If the item is a string it should print as is and if the item is integer
 of float it should reverse it.

def spam(items):
    for item in items:
        if isinstance(item, str):   # Check if the item is an instance of String
            print(item)
        else:
            temp = str(item)    # Typecast Integer to String
            print(temp[::-1])   # Reverse the String

>>> spam(['apple', 'yahoo', '1234', 100, 123.76, '26.23'])
apple
yahoo
1234
001
67.321
26.23
>>> 
18 Write a class named Simple and it should have iteration capability.

class Simple:
    def __init__(self, items):
        self._items = items

    def __iter__(self):
        return iter(self._items)

>>> s = Simple([1, 2, 3, 4, 5])
>>> 
>>> for item in s:
	print(item)
1
2
3
4
5
>>>
19 Write a Custom class which can access the values of dictionaries using d['a'] and d.a

class MyDict:
    def __init__(self, d):
        self._dict = d

    def __getitem__(self, item):
        return self._dict[item]

    def __getattr__(self, name):
        return self._dict[name]

>>> d = MyDict({'a': 1, 'b': 2})
>>> d.a
1
>>> d.b
2
>>> d['a']
1
>>> d['b']
2
>>> 
20 Write a python program to get the below output

sentence = "Hi How are you" 
o/p should be "iH woH era uoy"

>>> sentence = "Hi How are you"
>>> words = sentence.split()
>>> words
['Hi', 'How', 'are', 'you']
>>> reversed_words = [word[::-1] for word in words]
>>> reversed_words
['iH', 'woH', 'era', 'uoy']
>>> ' '.join(reversed_words)
'iH woH era uoy'
>>> 
21 Write a python program to get the below output

sentence = "Hi How are you" 
o/p should be "ouy era woH iH"

>>> sentence = "Hi How are you"
>>> sentence[::-1]
'uoy era woH iH'
>>> 
22 Write a lambda function to add two numbers (a, b)

>>> add = lambda a, b: a + b
>>> add(1, 2)
3
>>> add(100, 300)
400
>>> 
23 What is the output of the following

a = [1, 2, 3]
b = [4, 5, 6]
print([a, b])
print((a, b))

>>> print((a, b))
([1, 2, 3], [4, 5, 6])   # Tuple of Lists
>>> print([a, b])
[[1, 2, 3], [4, 5, 6]]   # List of Lists
>>> 
24 How to remove duplicates from the list without using inbuilt functions

>>> items = [1, 2, 3, 4, 1, 2, 3, 4, 5]
>>> uniques = []
>>> for item in items:
	if item not in uniques:
		uniques.append(item)	
>>> print(uniques)
[1, 2, 3, 4, 5]
>>> 
25 Find the longest word in the sentence

sentence = "Hello world. Welcome to Python"
>>> sentence = "Hello world. Welcome to Python"
>>> words = sentence.split()
>>> d = {word: len(word) for word in words}
>>> max(d.items(), key= lambda item: item[-1])
('Welcome', 7)
>>>
26 Write a custom function which returns the length of the iterable without using builtin len method

>>> def _len(iterable):
	_count = 0
	for item in iterable:
		_count +=1
	return _count

>>> l = [1, 2, 3, 4]
>>> _len(l)
4
>>> 
>>> t = (1, 2, 3, 4, 5)
>>> _len(t)
5
>>> 
>>> d = {'a': 1, 'b': 2, 'c': 3}
>>> _len(d)
3
>>>
27 write a program to reverse the values in the dictionary if the value is of type String

>>> d = {'a': 'hello', 'b': 100, 'c': 10.1, 'd': 'world'}
>>> rev = {  key: value[::-1] if isinstance(value, str) else value for key, value in d.items()}
>>> rev
{'a': 'olleh', 'b': 100, 'c': 10.1, 'd': 'dlrow'}
28 write a program to get 1234

t = ('1', '2', '3', '4')
>>> t = ('1', '2', '3', '4')
>>> ''.join(t)   # Use join function 
'1234'
>>> 
29 How to get the elements that are in list b but not in list a

a = [1, 2, 3] b = [1, 2, 3, 4]
>>> a = [1, 2, 3]
>>> b = [1, 2, 3, 4]
>>> set_a = set(a)      # Convert the list to set
>>> set_b = set(b)
>>> set_b.difference(set_a)
{4}
>>> 
30 A function takes variable number of positional arguments as input. How to check if the arguments that are passed are more than 5

>>> def spam(*args):
	 if len(args) > 5:
		 print('Length of arguments passed is greater than 5')
	 else:
		 print('Length Argument passed is less than 5')

		 
>>> spam(1, 2, 3, 4, 5, 6, 7)
Length of arguments passed is greater than 5
>>> 
>>> spam(1, 2)
Length Argument passed is less than 5
>>> 
>>> spam()
Length Argument passed is less than 5
>>> 
>>> spam(1, 2, 3, 4, 5)
Length Argument passed is less than 5
>>> 
31 Count the number of occurrences of "CRITICAL", "INFO" and "ERROR" lines in a log file.

# Assume Below is the contents of the log file

lines = """CRITICAL:Hello world
INFO: This is an info
ERROR: This is an error 
CRITICAL: This is critical
CRITICAL:Hello world
INFO: This is an info
ERROR: This is an error 
CRITICAL: This is critical
CRITICAL:Hello world
INFO: This is an info
ERROR: This is an error 
CRITICAL: This is critical
CRITICAL:Hello world
INFO: This is an info
ERROR: This is an error 
CRITICAL: This is critical"""

>>> from collections import defaultdict
>>> _errors = defaultdict(int)
>>> for line in lines.split('\n'):    # Split the line based on newline character
        # Split each line based on ":" to separate out error message part.
	error_type, other = line.strip().split(':')    
	_errors[error_type] +=1
	
>>> _errors
defaultdict(<class 'int'>, {'CRITICAL': 8, 'INFO': 4, 'ERROR': 4})
>>> _errors['INFO']
4
>>> _errors['ERROR']
4
>>> _errors['CRITICAL']
8
>>> 
32 Write a function to reverse any iterable without using reverse function.

>>> a = [1, 2, 3, 4, 5]
>>> _reversed = []
>>> for i in range(len(a)-1, -1,-1):
	_reversed.append(a[I])

>>> _reversed
[5, 4, 3, 2, 1]
>>> 
33 Write a function to print the below output.

func(string, flag)

func("TRACXN", 0)  # Should print RCN
func("TRACXN", 1)  # Should print TAX

>>> def func(string, flag):
	if flag:
		return string[0::2]
	return string[1::2]

>>> func('TRACXN', 0)
'RCN'
>>> func('TRACXN', 1)
'TAX'
>>> 
34 Sum all the numbers in the below string.

import re
s = "Sony12India567Pvt2ltd"
total = 0.00
>>> r = re.findall(r'[\d]', s)
>>> r
['1', '2', '5', '6', '7', '2']
>>> for item in r:
	total += int(item)
>>> total
23.0
35 Write a program to sum all the numbers in below string.

import re
s = "Sony12India567Pvt2ltd" # eg.12+567+2

>>> rr = re.findall(r'[\d]+', s)
>>> rr
['12', '567', '2']
>>> total = 0.00
>>> for item in rr:
	total += int(item)
>>> total
581.0
36 Print all the numbers in the below list

a = ['abc', '123', 'hello', '23']
>>> for item in a:
      if item.isnumeric():
	 print(item)

123
23
37 Program to print the number of occurrences of characters in a String without using inbuilt functions.

>>> s = 'helloworld'
>>> from collections import defaultdict
>>> d = defaultdict(int)
>>> for c in s:
	d[c] +=1
>>> print(d)
defaultdict(<class 'int'>, {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1})
38 Program to print only the repeated characters and count of the same.

>>> s = 'helloworld'
>>> from collections import defaultdict
>>> d = defaultdict(int)
>>> for c in s:
	d[c] +=1
>>> for key, value in d.items():
      if value > 1:
        print(key, value)
39 Program to print last "N" lines of a file.

from itertools import islice
_count = 0
with open('sample.txt') as f:
    for line in f:
        _count += 1  # Lines Count
    print(_count)
    f.seek(1)
    lines = islice(f, _count-5, _count)
    for line in lines:
        print(line, end='')
40 Write a program to get alternate characters of a string in list format.

>>> s = 'hello world welcome to python'
>>> alternate_chrs = [ c for c in s[::2]]
>>> alternate_chrs
['h', 'l', 'o', 'w', 'r', 'd', 'w', 'l', 'o', 'e', 't', ' ', 'y', 'h', 'n']
41 Write a program to get square of list of number's using lambda function .

>>> a = [1, 2, 3, 4, 5]
>>> squares = lambda number: number ** 2
>>> b = [ squares(item) for item in a]
>>> b
[1, 4, 9, 16, 25]
42 Write a function that accepts two strings and returns True if the two strings are anagrams of each other.

def is_anagram(str1, str2):
    if str1.upper() == str2.upper():    # Return False if both words are same
        return False
    s_str1 = sorted(str1.upper())   # Convert to upper case and sort
    s_str2 = sorted(str2.upper())
    if s_str1 == s_str2:    # Return True if both the lists are same
        return True
    else:
        return False
>>> is_anagram('ate', 'eat')
True
>>> is_anagram('racecar', 'racecar')
False
>>> is_anagram('file', 'life')
True
>>> is_anagram('hello', 'world')
False
>>> is_anagram("sinks", "skin")
False
>>> is_anagram("Listen", "silent")
True
43 Write a program to iterate through list and build a new list, only if the items of the list has even number of characters.

>>> names = ['apple', 'yahoo', 'google', 'gmail', 'walmart', 'flipkart', 'facebook', 'amazon']
>>> [ name for name in names if len(name) % 2 == 0]
['google', 'flipkart', 'facebook', 'amazon']
44 Write a program to iterate through list and build a new dictionary, only if the items of the list has even number of characters.

>>> names
['apple', 'yahoo', 'google', 'gmail', 'walmart', 'flipkart', 'facebook', 'amazon']
>>> { name: len(name) for name in names if len(name) % 2 == 0}
{'google': 6, 'flipkart': 8, 'facebook': 8, 'amazon': 6}
45 Write a program which squares the numbers in a list using map object

# Squares of numbers using map
# map is used to map a function with a iterable
a = [1, 2, 3, 4, 5]

def squares(item):
    return item ** 2

# Returns a map object, which happens to be an iterator.
m = map(squares, a)

# To get the squares of numbers, feed the map object to for loop
for item in m:
    print(item)

# Mapping lambda function to map object
m = map(lambda item: item ** 2, a)
46 Count number of lines in a file without loading the file to the memory

# Counting number of lines in a file without loading the file to the memory
with open('sample.txt') as f:
    _count = 0
    # Iterate over a file object and increment the _count
    for line in f:
        _count +=1

print(f'No of Lines: {_count}')
47 Printing line and line no's

# Counting number of lines in a file without loading the file to the memory
with open('sample.txt') as f:
    for line_no, line in enumerate(f):
        print(line_no, line)
48 Write a Program to print the sum of entire list and sum of only internal list

l = [[1,2,3],[4,5,6],[7,8,9]]
# Add the contents of internal list. ([6, 15, 24])
sum_internal = [sum(item) for item in l]

# Add the contents of entire list. (45)
sum_iternal = [sum(item) for item in l]
sum_whole_list = sum(sum_internal)
49 Write a program to reverse the list as below

words = ["hi", "hello", "python"]                                
# o/p ['nohtyp', 'olleh', 'ih']
words = words[::-1]
words = [word[::-1] for word in words]
50 Write a program to update the tuple

t1 = (1, 2, 3, 4)
t2 = (100, 200, 300)
# o/p (1, 2, 3, 4, 100, 200, 300)
t = t1 + t2
51 Write a program to replace value present in nested dictionary.

d = {'a': 100, 'b': {'m': 'man', 'n': 'nose', 'o': 'ox', 'c': 'cat'}}
# Replace "nose" with "net"
for key, value in d.items():
    if isinstance(value, dict):
        d[key]['n'] = "net"
print(d)
52 Write a program to count the number of white spaces in a file.

import re
white_spaces = 0
with open('data/sample.txt') as f:
    for line in f:
        match = re.findall(r'\s', line)
        if match:
            white_spaces += len(match)
print(white_spaces)
